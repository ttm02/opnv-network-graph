import argparse
import json
import difflib

from matplotlib import pyplot as plt
from tqdm import tqdm

from network import Network
import smopy


# TODO code duplication
# function is generated by AI
def find_closest_key_by_name(target_name, data):
    # Create a mapping of names to keys
    name_to_key = {v['Name']: k for k, v in data.items()}

    # Try exact match first
    if target_name in name_to_key:
        return name_to_key[target_name]

    # Find the closest match using difflib
    closest_match = difflib.get_close_matches(target_name, name_to_key.keys(), n=1, cutoff=0.5)

    if closest_match:
        return name_to_key[closest_match[0]]  # Return the key of the closest match
    return None  # No close match found


# Convert HH:MM to minutes since midnight
def time_to_minutes(time_str):
    h, m = map(int, time_str.split(':'))
    return h * 60 + m


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument('--network_file', default='network.json', required=False)
    parser.add_argument('--stations_file', default='stations.json', required=False)
    parser.add_argument('--time_limit', default=30, type=int, help='time limit in minutes', required=False)
    parser.add_argument('--start_time', default='09:00', type=str, help='start time in HH:MM', required=False)
    parser.add_argument('--station', default='Frankfurt Hauptbahnhof', type=str, required=False)

    return parser.parse_args()


def main():
    args = parse_arguments()
    print("Load network data from json")

    network = Network()

    # Load JSON
    with open(args.network_file, 'r') as f:
        network.set_stops(json.load(f))
    with open(args.stations_file, 'r') as f:
        all_stops = json.load(f)

    start_station = find_closest_key_by_name(args.station, all_stops)
    time_limit = args.time_limit
    start_time = time_to_minutes(args.start_time)

    print("Compute stations reachable in %i min from %s ..." % (time_limit, all_stops[start_station]["Name"]))

    reachable = network.get_reachable_stations_in_time(start_station, start_time, time_limit)
    print("%i Stations are reachable" % len(reachable))
    print("Draw map")

    min_lat = 180
    min_long = 180
    max_lat = -180
    max_long = -180

    coordinates = []
    for station in reachable:
        if station in all_stops:
            lat = float(all_stops[station]['lat'])
            lon = float(all_stops[station]['lon'])
            coordinates.append((lat, lon))

            min_lat = min(min_lat, lat)
            min_long = min(min_long, lon)
            max_lat = max(max_lat, lat)
            max_long = max(max_long, lon)

    # area to plot
    map_box = (min_lat, min_long, max_lat, max_long)
    # print(map_box)
    map = smopy.Map(map_box)

    # figsize is used for resolution
    ax = map.show_mpl(figsize=(24, 24))
    # ax = map.show_mpl(figsize=(8,8))

    for lat, lon in coordinates:
        x, y = map.to_pixels(lat, lon)
        ax.plot(x, y, 'or', ms=10, mew=2)

    plt.show()
    plt.savefig('map.pdf')


if __name__ == '__main__':
    main()
